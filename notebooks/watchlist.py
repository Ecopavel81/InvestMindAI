import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.collections import PatchCollection
import numpy as np
import matplotlib.patches as mpatches
import os
import gc
import json
from datetime import datetime
import pickle

class CryptoWatchlistAnalyzer:
    def __init__(self):
        self.watchlist = []
        self.analysis_results = {}
        self.models = {}  # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        
    def load_watchlist_from_input(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç watchlist –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        print("=== –ó–ê–ì–†–£–ó–ö–ê WATCHLIST ===")
        print("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ.")
        print("–ü—Ä–∏–º–µ—Ä—ã: BTCUSDT, ETHUSDT, SOLUUSDT")
        print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –Ω–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ")
        print("-" * 50)
        
        tickers = []
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –í–≤–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        input_line = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
        if input_line:
            tickers.extend([t.strip().upper() for t in input_line.split(',')])
        else:
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥
            print("–í–≤–æ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É (Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
            while True:
                ticker = input("–¢–∏–∫–µ—Ä: ").strip().upper()
                if not ticker:
                    break
                tickers.append(ticker)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        self.watchlist = list(set(filter(None, tickers)))
        print(f"\n–í–∞—à watchlist ({len(self.watchlist)} —Ç–∏–∫–µ—Ä–æ–≤): {', '.join(self.watchlist)}")
        
    def save_watchlist(self, filename="my_watchlist.txt"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç watchlist –≤ —Ñ–∞–π–ª"""
        with open(filename, 'w') as f:
            for ticker in self.watchlist:
                f.write(f"{ticker}\n")
        print(f"Watchlist —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        
    def load_watchlist_from_file(self, filename="my_watchlist.txt"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç watchlist –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                self.watchlist = [line.strip().upper() for line in f if line.strip()]
            print(f"Watchlist –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞: {filename}")
            print(f"–¢–∏–∫–µ—Ä—ã ({len(self.watchlist)}): {', '.join(self.watchlist)}")
        else:
            print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    def analyze_ticker_patterns(self, ticker):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
        csv_filename = f"{ticker}_kandles.csv"
        
        if not os.path.exists(csv_filename):
            return {
                'status': 'error',
                'message': f"–§–∞–π–ª {csv_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                'recommendation': 'SKIP'
            }
        
        try:
            df = pd.read_csv(csv_filename, parse_dates=["open_time"])
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_candles = len(df)
            if total_candles < 20:
                return {
                    'status': 'error',
                    'message': f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({total_candles} —Å–≤–µ—á–µ–π)",
                    'recommendation': 'SKIP'
                }
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–≤–µ—á–µ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            recent_data = df.tail(10)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df['price_change'] = df['close'].pct_change()
            df['volume_ma'] = df['volume'].rolling(window=5).mean()
            df['price_ma'] = df['close'].rolling(window=5).mean()
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            recent_trend = self.analyze_trend(recent_data)
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility = df['price_change'].std() * 100
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            volume_trend = self.analyze_volume_trend(df.tail(20))
            
            # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ML)
            prediction = self.simple_prediction_model(df.tail(20))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation = self.generate_recommendation(
                recent_trend, volatility, volume_trend, prediction
            )
            
            return {
                'status': 'success',
                'ticker': ticker,
                'total_candles': total_candles,
                'recent_trend': recent_trend,
                'volatility': round(volatility, 2),
                'volume_trend': volume_trend,
                'prediction': prediction,
                'recommendation': recommendation,
                'last_price': df['close'].iloc[-1],
                'price_change_24h': round(df['price_change'].iloc[-1] * 100, 2)
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'message': f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                'recommendation': 'SKIP'
            }
    
    def analyze_trend(self, data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        if len(data) < 3:
            return 'UNKNOWN'
        
        start_price = data['close'].iloc[0]
        end_price = data['close'].iloc[-1]
        change = (end_price - start_price) / start_price * 100
        
        if change > 2:
            return 'STRONG_UP'
        elif change > 0.5:
            return 'UP'
        elif change < -2:
            return 'STRONG_DOWN'
        elif change < -0.5:
            return 'DOWN'
        else:
            return 'SIDEWAYS'
    
    def analyze_volume_trend(self, data):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –æ–±—ä–µ–º–∞"""
        recent_volume = data['volume'].tail(5).mean()
        older_volume = data['volume'].head(15).mean()
        
        if recent_volume > older_volume * 1.2:
            return 'INCREASING'
        elif recent_volume < older_volume * 0.8:
            return 'DECREASING'
        else:
            return 'STABLE'
    
    def simple_prediction_model(self, data):
        """–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ML)"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        price_trend = self.analyze_trend(data)
        volume_trend = self.analyze_volume_trend(data)
        
        score = 0
        
        # Scoring based on trends
        if price_trend in ['UP', 'STRONG_UP']:
            score += 1
        elif price_trend in ['DOWN', 'STRONG_DOWN']:
            score -= 1
            
        if volume_trend == 'INCREASING':
            score += 0.5
        elif volume_trend == 'DECREASING':
            score -= 0.5
        
        # –ê–Ω–∞–ª–∏–∑ RSI-–ø–æ–¥–æ–±–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        recent_changes = data['close'].pct_change().dropna()
        if len(recent_changes) > 0:
            avg_change = recent_changes.mean()
            if avg_change > 0.01:  # 1% —Å—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç
                score += 0.5
            elif avg_change < -0.01:  # 1% —Å—Ä–µ–¥–Ω–∏–π —Å–ø–∞–¥
                score -= 0.5
        
        if score > 0.5:
            return 'BUY'
        elif score < -0.5:
            return 'SELL'
        else:
            return 'HOLD'
    
    def generate_recommendation(self, trend, volatility, volume_trend, prediction):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"""
        if prediction == 'BUY' and trend in ['UP', 'STRONG_UP'] and volume_trend == 'INCREASING':
            return 'STRONG_BUY'
        elif prediction == 'BUY':
            return 'BUY'
        elif prediction == 'SELL' and trend in ['DOWN', 'STRONG_DOWN']:
            return 'STRONG_SELL'
        elif prediction == 'SELL':
            return 'SELL'
        else:
            return 'HOLD'
    
    def analyze_watchlist(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å watchlist"""
        print("\n=== –ê–ù–ê–õ–ò–ó WATCHLIST ===")
        print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä—ã...")
        
        results = []
        
        for ticker in self.watchlist:
            print(f"–ê–Ω–∞–ª–∏–∑ {ticker}...", end=" ")
            result = self.analyze_ticker_patterns(ticker)
            results.append(result)
            print(f"‚úì {result['recommendation']}")
        
        self.analysis_results = results
        return results
    
    def display_recommendations(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if not self.analysis_results:
            print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ watchlist")
            return
        
        print("\n" + "="*80)
        print("üìä –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–ê–®–ï–ú–£ WATCHLIST")
        print("="*80)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
        recommendations = {}
        for result in self.analysis_results:
            if result['status'] == 'success':
                rec = result['recommendation']
                if rec not in recommendations:
                    recommendations[rec] = []
                recommendations[rec].append(result)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_order = ['STRONG_BUY', 'BUY', 'HOLD', 'SELL', 'STRONG_SELL']
        
        for rec_type in priority_order:
            if rec_type in recommendations:
                print(f"\nüéØ {rec_type} ({len(recommendations[rec_type])} —Ç–∏–∫–µ—Ä–æ–≤):")
                print("-" * 50)
                
                for result in recommendations[rec_type]:
                    emoji = self.get_recommendation_emoji(rec_type)
                    print(f"{emoji} {result['ticker']:<12} | "
                          f"–¶–µ–Ω–∞: ${result['last_price']:<8.4f} | "
                          f"–ò–∑–º: {result['price_change_24h']:>6.2f}% | "
                          f"–¢—Ä–µ–Ω–¥: {result['recent_trend']:<10} | "
                          f"–í–æ–ª–∞—Ç: {result['volatility']:<5.2f}%")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        errors = [r for r in self.analysis_results if r['status'] == 'error']
        if errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò –ê–ù–ê–õ–ò–ó–ê ({len(errors)} —Ç–∏–∫–µ—Ä–æ–≤):")
            print("-" * 50)
            for error in errors:
                print(f"‚ö†Ô∏è  {error.get('ticker', 'Unknown')}: {error['message']}")
    
    def get_recommendation_emoji(self, rec_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        emojis = {
            'STRONG_BUY': 'üöÄ',
            'BUY': 'üìà',
            'HOLD': '‚è∏Ô∏è',
            'SELL': 'üìâ',
            'STRONG_SELL': 'üîª'
        }
        return emojis.get(rec_type, '‚ùì')
    
    def save_analysis_report(self, filename=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"watchlist_analysis_{timestamp}.json"
        
        with open(filename, 'w') as f:
            json.dump(self.analysis_results, f, indent=2, default=str)
        
        print(f"\n–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
    
    def run_interactive_mode(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("üöÄ CRYPTO WATCHLIST ANALYZER")
        print("=" * 50)
        
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π watchlist")
            print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å watchlist –∏–∑ —Ñ–∞–π–ª–∞")
            print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π watchlist")
            print("4. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å watchlist")
            print("5. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            print("6. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å watchlist")
            print("7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞")
            print("0. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if choice == '1':
                self.load_watchlist_from_input()
            elif choice == '2':
                filename = input("–ò–º—è —Ñ–∞–π–ª–∞ (Enter –¥–ª—è my_watchlist.txt): ").strip()
                if not filename:
                    filename = "my_watchlist.txt"
                self.load_watchlist_from_file(filename)
            elif choice == '3':
                if self.watchlist:
                    print(f"\n–¢–µ–∫—É—â–∏–π watchlist ({len(self.watchlist)} —Ç–∏–∫–µ—Ä–æ–≤):")
                    for i, ticker in enumerate(self.watchlist, 1):
                        print(f"{i}. {ticker}")
                else:
                    print("Watchlist –ø—É—Å—Ç")
            elif choice == '4':
                if self.watchlist:
                    self.analyze_watchlist()
                else:
                    print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ watchlist")
            elif choice == '5':
                self.display_recommendations()
            elif choice == '6':
                if self.watchlist:
                    filename = input("–ò–º—è —Ñ–∞–π–ª–∞ (Enter –¥–ª—è my_watchlist.txt): ").strip()
                    if not filename:
                        filename = "my_watchlist.txt"
                    self.save_watchlist(filename)
                else:
                    print("Watchlist –ø—É—Å—Ç")
            elif choice == '7':
                if self.analysis_results:
                    filename = input("–ò–º—è —Ñ–∞–π–ª–∞ (Enter –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ): ").strip()
                    self.save_analysis_report(filename if filename else None)
                else:
                    print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑")
            elif choice == '0':
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    analyzer = CryptoWatchlistAnalyzer()
    analyzer.run_interactive_mode()